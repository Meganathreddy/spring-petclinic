node ('MVN') {
	try {
		notifyStarted()
			stage ('SCM') {
				git 'https://github.com/Meganathreddy/spring-petclinic.git'
			}
			stage ('Build') {
				sh 'pwd'
				sh 'mvn clean package'
			}
			stage('SonarQube analysis') {
					// performing sonarqube analysis with "withSonarQubeENV(<Name of Server configured in Jenkins>)"
				withSonarQubeEnv('sonar') {
					// requires SonarQube Scanner for Maven 3.2+
					sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.2:sonar'
				}
			}
			stage ('Dummy') {
				sh 'pwd'
			}
		notifySucessfull()
	}
	catch (e) {
		currentBuild.result = "Failed"
		notifyFailed()
		throw e
	}
}
	def notifyStarted() { }
	def notifySucessfull() { }
def notifyFailed() {	
		slackSend (color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"
		)
		hipchatSend (color: 'RED', notify: true,
			message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"
		)
 
	emailext (
      subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
      body: """<p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
        <p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>""",
      to: "meganath.chilla@gmail.com"
	)
}	
	  
	  